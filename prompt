##################################################################### CONFIG
	default_user=lvv 		# default user is not displayed
	default_host="ahp"      # default host is not displayed
	default_domain="lvvnet"	# default domain is not deplayed, remote host is alwais shown

    # dir, rc, root color 
	if [ "`tput colors`" -ge 8 ];  then				#  Colors
		dir_color='CYAN'
		rc_color='red'
		root_id_color='magenta'
	else											#  B/W
		dir_color='bw_bold'
		rc_color='bw_bold'
	fi

                                                    # where is user color?

    # host color
    TOSHA_host_color='yellow'
    TASHA_host_color='cyan'
       AL_host_color='geen'
       SH_host_color='blue'
      LVV_host_color='blue'
      AHP_host_color='white'

    # git color     
    git_clean=blue         # nothing to commit (working directory clean)
    git_modified=red       # # Changed but not updated:
    git_added=green        # # Changes to be committed:
    git_untracked=BLUE     # # Untracked files:


##################################################################### 
    LC_ALL=C
	# if label non empty, append 1 space
	label=${1:+$1 }


	# echo "*** /etc/prompt  on A,  TERM=$TERM"
	unset PROMPT_COMMAND

	#######  work aroud for MC bug
	if [ -z "$TERM" -o "$TERM" = "dumb" -o -n "$MC_SID" ]; then
		unset PROMPT_COMMAND
		PS1='\w> '
		return 0
	fi

	export who_where


set_shell_title() { 

	xterm_title() { echo  -n "]2;${@}" ; }

	screen_title() { 
		# FIXME: run this only if screen is in xterm (how to test for this?)
		xterm_title  "sCRn  $label$plain_who_where $@" 

		# FIXME $STY not enherited though "su -"
		[ "$STY" ] && screen -S $STY -X title "$@"
	}

	case $TERM in

		screen*)                                                    
			screen_title "$@"
			;;

		xterm* | rxvt* | gnome-terminal | konsole | eterm | wterm )       
			# is there a capability which we can to test 
			# for "set term title-bat" and its escapes?
			#echo -n "]2;$label$plain_who_where $1"
			xterm_title  "$label$plain_who_where $@"
			;;

		*)                                                     
			;;
	esac
}

export -f set_shell_title

###################################################### ID (user name)
	id=`id -un`
	id=${id#$default_user}

###################################################### TTY
	tty=`tty`
	tty=`echo $tty | sed "s:/dev/pts/:p:; s:/dev/tty::" `		# RH tty devs	
	tty=`echo $tty | sed "s:/dev/vc/:vc:" `				# gentoo tty devs

	if [[ "$TERM" = "screen" ]] ;  then

		#	[ "$WINDOW" = "" ] && WINDOW="?"
		#	
		#		# if under screen then make tty name look like s1-p2
		#		# tty="${WINDOW:+s}$WINDOW${WINDOW:+-}$tty"
		#	tty="${WINDOW:+s}$WINDOW"  # replace tty name with screen number
		tty="$WINDOW"  # replace tty name with screen number
	fi

	# we don't need tty name under X11
	case $TERM in
		xterm* | rxvt* | gnome-terminal | konsole | eterm | wterm )  unset tty ;;
		*)		                                                              ;;
	esac

	########################################################## ANSI 
	# FIXME: color config should be at the top
	#
	#   black?    0	8			  
	#	red       1 9
	#	green     2 10
	#	yellow    3 11
	#	blue      4 12
	#	magenta   5 13
	#	cyan      6 14
	#	white     7 15
	#
	#	terminfo setaf/setab - sets ansi foreground/background
	#	terminfo sgr0 - resets all atributes
	#	terminfo colors - number of colors

	### if term support colors,  then use color prompt, else bold

              black='\['`tput sgr0; tput setaf 0`'\]'
                red='\['`tput sgr0; tput setaf 1`'\]'
              green='\['`tput sgr0; tput setaf 2`'\]'
             yellow='\['`tput sgr0; tput setaf 3`'\]'
               blue='\['`tput sgr0; tput setaf 4`'\]'
            magenta='\['`tput sgr0; tput setaf 5`'\]'
               cyan='\['`tput sgr0; tput setaf 6`'\]'
              white='\['`tput sgr0; tput setaf 7`'\]'

              BLACK='\['`tput setaf 0; tput bold`'\]'
                RED='\['`tput setaf 1; tput bold`'\]'
              GREEN='\['`tput setaf 2; tput bold`'\]'
             YELLOW='\['`tput setaf 3; tput bold`'\]'
               BLUE='\['`tput setaf 4; tput bold`'\]'
            MAGENTA='\['`tput setaf 5; tput bold`'\]'
               CYAN='\['`tput setaf 6; tput bold`'\]'  # why 14 dosn't work?
              WHITE='\['`tput setaf 7; tput bold`'\]'

            bw_bold='\['`tput bold`'\]'
               bell=`tput bel`

       colors_reset='\['`tput sgr0`'\]'

	# Workaround for UTF readline(?) bug. Dissable bell when UTF
	locale |grep -qi UTF && bell=''	


    eval dir_color="\$$dir_color"
    eval rc_color="\$$rc_color"
    eval root_id_color="\$$root_id_color"


	########################################################### HOST
	### we don't display home host/domain  $SSH_* set by SSHD or keychain

	# is sshd our perent?
	if 	[[ "$SSH_AUTH_SOCK" ]] || 
		for ((pid=$$; $pid != 1 ; pid=`ppid_of $pid`)); do ps h -o command -p $pid; done | grep -q sshd
	then 
		host=${HOSTNAME}
		#host=`hostname --short`
		#host=`echo ${host%$default_host} | tr a-z A-Z`
		host=`echo ${host} | tr a-z A-Z`
        eval host_color=\$${host}_host_color
	else
		host=""
	fi 

    eval host_color="\$$host_color"

	# we already should have short host name, but just in case
	host=${host%.localdoman}
	host=${host%.$default_domain}


########################################################### WHO_WHERE 
# who_ware. Is constant.  Looks like
# 	[user@]host[-tty]

color_who_where="${id:+$id@}$host_color$host${tty:+ $tty}"
plain_who_where="${id:+$id@}$host"

# remove trailing "@" if any
color_who_where="${color_who_where%@}"
plain_who_where="${plain_who_where%@}"

# add traling " "
color_who_where="$color_who_where "
plain_who_where="$plain_who_where "

# if  $who_where==" "  then  who_where=""
color_who_where="${color_who_where## }"
plain_who_where="${plain_who_where## }"


# if root then highlight who_where
if	[ "$id" == "root" ]  ; then 
	color_who_where="$root_id_color$color_who_where$colors_reset"
fi


############################################################### PROMPT_COMMAND

PROMPT_COMMAND='

	rc="$?"

	if [[ "$rc" = "0" ]]; then 
		rc=""
	else
		#rc="$rc_color$rc$colors_reset$bell "
		rc="$rc_color$rc$colors_reset "
	fi

	set_shell_title "$PWD/" 

	# truncate $PWD to $max
		max=35
		front=7
		head=${PWD:0:$front}"..."

    # LOCAL 
        # GIT 
            if [[ -d .git  ||  -d ../.git  || -d ../../.git ]];   then

                ### status
                # clean(blue)       nothing to commit (working directory clean)
                # modified(red)     # Changed but not updated:
                # added(green)      # Changes to be committed:
                # untracked(yellow) # Untracked files:
                
                eval `git status |
                        sed -n "
                            s/^# On branch /branch=/p
                            s/^nothing to commit (working directory clean)/status=clean/p
                            s/^# Untracked files:/status=untracked/p
                            s/^# Changed but not updated:/status=modified/p
                            s/^# Changes to be committed:/status=added/p
                        " 
                `

                ### compose local label
                eval git_color="\${git_$status}"
                eval esc_string="\$$git_color"
                head_local="${branch+$esc_string ($branch)}"

            fi 
    #########################
    
    head_local="${head_local+$head_local\n}"

	#PS1="$label$rc'$color_who_where$dir_color'${head:10*(${#PWD}<max)}${PWD:(${#PWD}>max)*(${#PWD}-max):max}> '$colors_reset'"
	PS1="$head_local$colors_reset$label$rc'$color_who_where$dir_color'\w$tail_local$dir_color> '$colors_reset'"
    unset local
'
#echo \"$color_who_where\"
unset rc id tty bell default_user default_host
unset rc_colors dir_color root_id_color 

# vim: set syntax=sh:
